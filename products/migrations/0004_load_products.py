# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-23 08:27
from __future__ import unicode_literals
import os
import random
import string
import decimal
from django.conf import settings

from django.db import migrations


def create_technology_with_categories(apps, schema_editor):
    Technology = apps.get_model("products", "Technology")
    Category = apps.get_model("products", "Category")
    technology = ['OLEDs', 'TFTs', 'Monochrome', 'Touch Panels', 'Low Power']
    for tech in technology:
        Technology(name=tech, description='Test {}'.format(tech), image=os.path.join(settings.STATIC_URL, 'test_images/test-product-bar-image.jpeg')).save()

    oled = ['Full Colour OLED', 'Mono PMOLED', 'Alphanumeric PLOMED', 'Custom OLED']
    tft = ['TFT', 'Touch TFT', 'Smart TFT', 'Sun View TFT', 'TFT Kits', 'TFT Projects']
    monoch = ['1U/2U Format LCD', 'Mono Graphic LCD', 'Custom Modules', '1U/2U Eval Kits']
    touch = ['Multi-Touch PCT', '5-Wire Resistive', '4-Wire Resistive', 'Glass Resistive', 'Haptic Touch', 'Screens', 'Touch Controllers']
    power = ['E-Paper Displays', 'E-Paper Extension Kits', 'E-Paper Developer Kits', 'AdapTag Wireless Kit', 'DensiPaper Products', 'E-Paper Shop']
    categories = [oled, tft, monoch, touch, power]
    id_cat = 0
    for cat in categories:
        t = Technology.objects.get(name=technology[id_cat])
        for c in cat:
            Category(name=c, description='Test {}'.format(c), technology=t, image=os.path.join(settings.STATIC_URL, 'test_images/test-product-bar-image-2.jpeg')).save()
        id_cat += 1


def create_tft_and_pct_product(apps, schema_editor):
    TftProduct = apps.get_model("products", "TftProduct")
    Touch = apps.get_model("products", "Touch")
    Category = apps.get_model("products", "Category")
    TftIF = apps.get_model("products", "TftIF")
    Feature = apps.get_model("products", "Feature")
    TouchPanelProduct = apps.get_model("products", "TouchPanelProduct")
    for x in ['IPS', 'Slim profile', 'MVA', 'Sunlight Readable', 'CPU I/F', 'High Brightness', 'UWV Polarizer']:
        Feature(name=x).save()
    for x in ['24-bit RGB', 'SPI/RGB', '8 bit CPU']:
        TftIF(name=x).save()
    Touch(type='4WR', i_f='-', points=1).save()
    Touch(type='PCT', i_f='I2C', points=2).save()
    for x in range(20):
        TftProduct(
            name=''.join(random.choice(string.ascii_letters) for x in range(10)),
            category=Category.objects.get(name='TFT'),
            size=random.choice([4.3, 4.2]),
            dimension_w=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_h=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_d=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            touch=random.choice([None, Touch.objects.all()[random.randint(0, Touch.objects.count()-1)]]),
            colour=bool(random.getrandbits(1)),
            resolution='{}x{}'.format(random.randint(0, 480), random.randint(0, 999)),
            brightness=random.randint(0, 999),
            viewing_angle='{}/{}/{}/{}'.format(random.randint(0, 99), random.randint(0, 99), random.randint(0, 99), random.randint(0, 99)),
            tft_i_f=TftIF.objects.all()[random.randint(0, TftIF.objects.count()-1)],
        ).save()
        TftProduct.objects.last().features.add(Feature.objects.all()[random.randint(0, Feature.objects.count()-1)])
    for x in range(3):
        TftProduct(
            name='Kw test {}'.format(''.join(random.choice(string.ascii_letters) for x in range(3))),
            category=Category.objects.get(name='TFT'),
            size=4.3,
            dimension_w=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_h=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_d=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            touch=random.choice([None, Touch.objects.all()[random.randint(0, Touch.objects.count()-1)]]),
            colour=bool(random.getrandbits(1)),
            resolution='{}x{}'.format(random.randint(0, 480), random.randint(0, 999)),
            brightness=random.randint(0, 999),
            viewing_angle='{}/{}/{}/{}'.format(random.randint(0, 99), random.randint(0, 99), random.randint(0, 99), random.randint(0, 99)),
            tft_i_f=TftIF.objects.all()[random.randint(0, TftIF.objects.count()-1)],
        ).save()
        TftProduct.objects.last().features.add(Feature.objects.all()[random.randint(0, Feature.objects.count()-1)])
    Structure = apps.get_model("products", "Structure")
    Structure(name='OGS').save()
    Controller = apps.get_model("products", "Controller")
    Controller(name='ILI2839').save()
    Interface = apps.get_model("products", "Interface")
    Interface(name='I2C').save()
    for x in range(20):
        TouchPanelProduct(
            name=''.join(random.choice(string.ascii_letters) for x in range(10)),
            category=Category.objects.get(name='Multi-Touch PCT'),
            size=4.3,
            dimension_w=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_h=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            dimension_d=decimal.Decimal('{}.{}'.format(random.randint(0, 125), random.randint(0, 99))),
            active_area_w=decimal.Decimal('{}.{}'.format(random.randint(0, 100), random.randint(0, 99))),
            active_area_h=decimal.Decimal('{}.{}'.format(random.randint(0, 100), random.randint(0, 99))),
            touch_points=random.randint(2, 15),
            structure=Structure.objects.first(),
            controller=Controller.objects.first(),
            interface=Interface.objects.first()
        ).save()


def create_product_images(apps, schema_editor):
    ProductImage = apps.get_model("products", "ProductImage")
    Product = apps.get_model("products", "Product")
    for product in Product.objects.all():
        ProductImage(name='Test product image', image=os.path.join(settings.STATIC_URL, 'test-product-image.jpeg'), product=product).save()


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_auto_20160113_1610'),
    ]

    operations = [
        migrations.RunPython(create_technology_with_categories),
        migrations.RunPython(create_tft_and_pct_product),
        migrations.RunPython(create_product_images),
    ]
